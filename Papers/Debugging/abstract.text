The state of the art in application debugging in free Common Lisp
implementations leaves much to be desired.  In many cases, only a
backtrace inspector is provided, allowing the application programmer
to examine the control stack when an unhandled error is signaled.
Most such implementations do not allow the programmer to set
breakpoints (unconditional or conditional), nor to step the program
after it has stopped.

Furthermore, even debugging tools such as tracing or manually calling
break are typically very limited in that they do not allow the
programmer to trace or break in important system functions such as
make-instance or shared-initialize, simply because these tools impact
all callers, including those of the system itself, such as the
compiler.

In this paper, we suggest a technique that solves most of these
problems.  The main idea is to have a debugger thread debug one or
more application threads, with all these threads running in the same
image.  Tracing and setting breakpoints have an effect only in the
debugged thread so that system code running in other threads is not
impacted.  We discuss several advantages of this technique, and in
particular how it can make debugging omnipresent, i.e., not requiring
recompilation to get its benefits.  We describe how to achieve this
advantage while keeping the overhead low for threads that are not
being debugged.
