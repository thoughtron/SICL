(cl:in-package #:sicl-hir-interpreter-test)

(defun make-environment ()
  (let ((environment
          (make-instance 'sicl-extrinsic-environment:environment)))
    (sicl-extrinsic-environment::import-from-host environment)
    (sicl-hir-interpreter::fill-environment environment)
    environment))

(defun test-if-1 (client)
  (let ((environment (make-environment))
        (form '(if (ff 10) 11 12)))
    (setf (sicl-genv:fdefinition 'ff environment) (constantly nil))
    (assert (eql (eval client form environment) 12))))

(defun test-if-2 (client)
  (let ((environment (make-environment))
        (form '(if (ff 10) 11 12)))
    (setf (sicl-genv:fdefinition 'ff environment) (constantly t))
    (assert (eql (eval client form environment) 11))))

(defun test-if (client)
  (test-if-1 client)
  (test-if-2 client))

(defun test-let (client)
  (let ((environment (make-environment))
        (form '(let ((x 10)) (+ x 20))))
    (setf (sicl-genv:fdefinition '+ environment) #'+)
    (assert (eql (eval client form environment) 30))))

(defun test-let* (client)
  (let ((environment (make-environment))
        (form '(let* ((x 10) (y 20)) (+ x y))))
    (setf (sicl-genv:fdefinition '+ environment) #'+)
    (assert (eql (eval client form environment) 30))))

(defun test-symbol-value (client)
  (let ((environment (make-environment))
        (form '(+ *x* 20)))
    (setf (sicl-genv:fdefinition '+ environment) #'+)
    (setf (sicl-genv:special-variable '*x* environment t) 10)
    (assert (eql (eval client form environment) 30))))

(defun test-block-1 (client)
  (let ((environment (make-environment))
        (form '(let ((x 10))
                (block hello
                  (return-from hello (+ x 20))
                  50))))
    (setf (sicl-genv:fdefinition '+ environment) #'+)
    (assert (eql (eval client form environment) 30))))

(defun test-block-2 (client)
  (let ((environment (make-environment))
        (form '(let ((x 10))
                (block hello
                  (let ((y 20))
                    (return-from hello (+ x y)))
                  50))))
    (setf (sicl-genv:fdefinition '+ environment) #'+)
    (assert (eql (eval client form environment) 30))))

(defun test-block (client)
  (test-block-1 client)
  (test-block-2 client))

(defun test-tagbody-1 (client)
  (let ((environment (make-environment))
        (form '(let ((x 10))
                (tagbody
                   (setq x (+ x 5))
                   (go hello)
                   (setq x (+ x 7))
                 hello
                   (setq x (+ x 6))
                   (go out)
                 hi
                   (setq x (+ x 1))
                 out)
                x)))
    (setf (sicl-genv:fdefinition '+ environment) #'+)
    (assert (= (eval client form environment) 21))))

(defun test-tagbody-2 (client)
  (let ((environment (make-environment))
        (form '(let ((x 10))
                (tagbody
                   (let ((y 5))
                     (setq x (+ x y))
                     (go hello))
                   (setq x (+ x 7))
                 hello
                   (setq x (+ x 6))
                   (go out)
                 hi
                   (setq x (+ x 1))
                 out)
                x)))
    (setf (sicl-genv:fdefinition '+ environment) #'+)
    (assert (= (eval client form environment) 21))))

(defun test-tagbody (client)
  (test-tagbody-1 client)
  (test-tagbody-2 client))

(defun test-bind (client)
  (let ((environment (make-environment))
        (form '(flet ((stuff (x) (+ x *x*)))
                (let ((*x* 10))
                  (stuff 20)))))
    (setf (sicl-genv:fdefinition '+ environment) #'+)
    (setf (sicl-genv:special-variable '*x* environment t) 5)
    (assert (eql (eval client form environment) 30))))

(defun test-car (client)
  (let ((environment (make-environment))
        (form '(cleavir-primop:car (list 1 2))))
    (setf (sicl-genv:fdefinition 'list environment) #'list)
    (setf (sicl-genv:special-operator 'cleavir-primop:car environment) t)
    (assert (eql (eval client form environment) 1))))

(defun test-cdr (client)
  (let ((environment (make-environment))
        (form '(cleavir-primop:cdr (list 1 2))))
    (setf (sicl-genv:fdefinition 'list environment) #'list)
    (setf (sicl-genv:special-operator 'cleavir-primop:cdr environment) t)
    (assert (equal (eval client form environment) '(2)))))

(defun test-rplaca (client)
  (let ((environment (make-environment))
        (form '(let ((l (list 1))) (cleavir-primop:rplaca l 2) l)))
    (setf (sicl-genv:fdefinition 'list environment) #'list)
    (setf (sicl-genv:special-operator 'cleavir-primop:rplaca environment) t)
    (assert (equal (eval client form environment) '(2)))))

(defun test-rplacd (client)
  (let ((environment (make-environment))
        (form '(let ((l (cons 2 3))) (cleavir-primop:rplacd l 1) l)))
    (setf (sicl-genv:fdefinition 'list environment) #'list)
    (setf (sicl-genv:special-operator 'cleavir-primop:rplacd environment) t)
    (assert (equal (eval client form environment) '(2 . 1)))))

(defun test-eq-1 (client)
  (let ((environment (make-environment))
        (form '(if (null (list)) 1 2)))
    (setf (sicl-genv:fdefinition 'list environment) #'list)
    (setf (sicl-genv:fdefinition 'null environment) #'null)
    (assert (eql (eval client form environment) 1))))

(defun test-eq-2 (client)
  (let ((environment (make-environment))
        (form '(if (cleavir-primop:eq (ff 10) 234) 1 2)))
    (setf (sicl-genv:fdefinition 'ff environment) (constantly t))
    (setf (sicl-genv:special-operator 'cleavir-primop:eq environment) t)
    (assert (eql (eval client form environment) 2))))

(defun test-eq (client)
  (test-eq-1 client)
  (test-eq-2 client))

(defun test-labels (client)
  (let ((environment (make-environment))
        (form '(labels ((is-even (n)
                         (if (zerop n)
                             t
                             (is-odd (1- n))))
                        (is-odd (n)
                         (if (zerop n)
                             nil
                             (is-even (1- n)))))
                (list (is-even 33) (is-odd 33)))))
    (setf (sicl-genv:fdefinition 'list environment) #'list)
    (setf (sicl-genv:fdefinition '1- environment) #'1-)
    (setf (sicl-genv:fdefinition 'zerop environment) #'zerop)
    (setf (sicl-genv:special-operator 'if environment) t)
    (assert (equal (eval client form environment) '(nil t)))))

(defun test-multiple-value-prog1-1 (client)
  (let ((environment (make-environment))
        (form '(multiple-value-prog1 (ff 10) (ff 30))))
    (setf (sicl-genv:fdefinition 'ff environment)
          (lambda (x) (values 20 x)))
    (assert (equal (multiple-value-list (eval client form environment))
                   '(20 10)))))

(defun test-multiple-value-prog1-2 (client)
  (let ((environment (make-environment))
        (form '(let ((x (multiple-value-prog1 (ff 10) (ff 30)))) x)))
    (setf (sicl-genv:fdefinition 'ff environment)
          (lambda (y) (values 20 y)))
    (assert (equal (multiple-value-list (eval client form environment))
                   '(20)))))

(defun test-multiple-value-prog1 (client)
  (test-multiple-value-prog1-1 client)
  (test-multiple-value-prog1-2 client))

(defun test-multiple-value-call (client)
  (let ((environment (make-environment))
        (form '(cleavir-primop:multiple-value-call #'values (ff 3))))
    (setf (sicl-genv:special-operator 'cleavir-primop:multiple-value-call environment) t)
    (setf (sicl-genv:fdefinition 'ff environment)
          (lambda (x) (values (1+ x) (1- x))))
    (setf (sicl-genv:fdefinition 'values environment)
          #'values)
    (assert (equal (multiple-value-list (eval client form environment))
                   '(4 2)))))

(defun test ()
  (let ((client (make-instance 'trucler-reference:client)))
    (test-if client)
    (test-let client)
    (test-let* client)
    (test-symbol-value client)
    (test-block client)
    (test-tagbody client)
    (test-bind client)
    (test-car client)
    (test-cdr client)
    (test-rplaca client)
    (test-rplacd client)
    (test-eq client)
    (test-labels client)
    (test-multiple-value-prog1 client)
    (test-multiple-value-call client)))
